{
  "General": {
    "General Overview": {
      "Beginner": "A Beginner developer is just getting started.",
      "Advanced Beginner": "Advanced Beginners may not be the workhorse of a project but they can provide more value than they require from a dev team.",
      "Intermediate": "Intermediate developers can effectively support Advanced Beginner and Beginner developers. They can understand and ask challenging questions about design techniques.",
      "Advanced": "Advanced developers are capable of looking at the bigger picture for engineering challenges and design key components from scratch. They can mentor not just support more junior devs.",
      "Expert": "Experts can not only design a solution but also see how it interacts with other software. They're capable of acting as force multipliers as well as mentors. While they may not be as “hands on keyboard” as other devs they still know how to code at an incredibly high level."
    }
  },
  "Communication": {
    "Feedback and Code Reviews": {
      "Beginner": "What is a code review?  I am still learning about pull-requests and how to accept feedback constructively and implement feedback without additional help.",
      "Advanced Beginner": "I typically understand feedback but may need more guidance to fully apply improvements. When providing feedback I typically notice clear issues in reviews but need to improve on speaking up more with helpful and specific ideas.",
      "Intermediate": "I welcome feedback and can implement it efficiently in my work and reviews. I am more confident in the comments I give in reviews and am able to provide quality guidance to less experienced teammates.",
      "Advanced": "I accept feedback well and act on it when suitable. When reviewing other's code I consistently give constructive and actionable feedback tailored to each person and situation. My feedback to others is typically well thought out and is able to be easily understood and implemented by other team members.",
      "Expert": "I exemplify a supportive and productive feedback culture and embrace feedback and apply it when necessary. I can quickly spot bugs by just reviewing code and am proactively looking at ways to simplify a solution while adhering to the system's architecture.  While critical during the review process, I strive to create a culture of continuous learning and improvement."
    },
    "Understanding Requirements": {
      "Beginner": "I am still learning the system and require very detailed step-by-step overviews of requirements along with acceptance criteria.",
      "Advanced Beginner": "I am able to take requirements and fill in some technical gaps but still require defined acceptance criteria.",
      "Intermediate": "I can implement requirements both to the letter and spirit of acceptance criteria as well as fill in gaps as necessary. I ask good questions during requirements grooming, however I sometimes fail to identify the real problem and can hyper-focus on smaller, less-important, details (bikeshedding).",
      "Advanced": "I frequently provide the project with simpler optimized requirement alternatives. I am comfortable communicating project needs to developers and design constraints to users. I am able to effectively break down large requirements by domain.",
      "Expert": "I am able to anticipate the organization’s needs and can improve grooming to suit it. I'm capable of building roadmaps that balance technical efficiency with maximum value. Highly effective at “pushing back” on the Business when conflicts come up."
    },
    "Technical Communication": {
      "Beginner": "I am still learning technical vocabulary. I can explain a concept if I have seen it or read about it and have also implemented it several times.",
      "Advanced Beginner": "I can communicate clearly with higher level developers but still struggles to discuss things with non-technical stakeholders. I can help beginners with obvious problems but will defer fairly frequently to more senior developers.",
      "Intermediate": "I am becoming more comfortable discussing technical topics with non-technical stakeholders. I can fluently discuss topics with correct vocabulary. I am able to identify patterns in the system and constantly search for ways to simplify it but can occasionally miss details.",
      "Advanced": "I am capable of fluently discussing technical topics with simplified and direct vocabulary. I can effectively communicate with others through both verbal and written communication and able to match my descriptions to the intended audience.",
      "Expert": "I am able to discuss technology with the broadest range of stakeholders from executive presentations to in-depth debates with solution architects on the details of tool selection. I enjoy building knowledge and insight in more junior team members."
    }
  },
  "Core Software Skills": {
    "General": {
      "Beginner": "I can complete assigned tasks under supervision. I am learning core engineering concepts and languages. I follow prescribed processes and may have trouble identifying when to seek guidance.",
      "Advanced Beginner": "I work effectively within a team and can build applications or services based on requirements. I write maintainable code and am building my technical skills. I understand software lifecycles and project needs.",
      "Intermediate": "I can independently develop solutions and collaborate cross-functionally. I make technical recommendations and optimize based on best practices. I participate in architecture reviews, retrospectives and mentoring.",
      "Advanced": "I provide multi-disciplinary leadership through influence and enablement. I develop staff, set direction, and define processes and standards. I am a trusted advisor on designs, roadmaps and governance.",
      "Expert": "I am a highly skilled technical leader known for strategic vision and judgment. I build teams, capabilities and culture. I am a hands-on subject matter expert and coach. I shape the engineering profession through public speaking, publishing and contributions."
    },
    "AWS Cloud Knowledge":{
      "Beginner": "I am capable of explaining the basic benefits of cloud computing and AWS with simplified vocabulary. I am familiar with fundamental AWS services and can complete basic tasks like launching and connecting to an EC2 instance.",
      "Advanced Beginner":"I am able to describe the Well-Architected Framework principles and create straightforward VPCs and container deployments using essential AWS services. I am starting to apply my knowledge to build basic solutions.",
      "Intermediate":"I can fluently identify anti-patterns against the Well-Architected Framework. I am skilled in using a range of AWS services to automate workflows, secure applications, and deploy infrastructure as code.",
      "Advanced":"I am adept at designing robust solutions using a variety of AWS services and features. I can optimize cost and performance and extend AWS services programmatically at an advanced level. I can adapt my communication style for technical and non-technical audiences.",
      "Expert":"I am highly capable in designing fault-tolerant, enterprise-grade architectures on AWS. I can diagnose and resolve complex technical issues and deliver highly secure, compliant solutions optimized for performance and cost. I can communicate and explain AWS solutions to both technical and business stakeholders clearly and effectively."
    },
    "Microservices/Backend development":{
      "Beginner": "I can explain the basic principles of microservices at a high level. I have written simple functions and deployed basic services.",
      "Advanced Beginner":"I understand microservices and can explain it to others.  I'm comfortable creating APIs and functions if others already exist in the service.",
      "Intermediate":"I have worked on several serverless projects using AWS Lambda and API Gateway. I can design and code RESTful APIs for microservices that follow standard practices",
      "Advanced":"I lead development of complex serverless systems and event-driven architectures. I implement secure API gateways, manage cross-service dependencies, and integrate serverless with legacy systems. I can diagnose and debug performance issues in distributed serverless environments.",
      "Expert":"I am an authority in building resilient, scalable production systems using a serverless microservices approach on AWS. I author libraries, tools and standards around serverless development. I can translate complex business needs into elegant serverless solutions and communicate them clearly."
    },
    "React/Frontend development":{
      "Beginner": "I understand the basic principles of React and can build simple user interface components. I have basic knowledge of HTML, CSS and JavaScript.",
      "Advanced Beginner":"I can build React applications with multiple components and states. I understand concepts like props, hooks and lifecycle methods. I can integrate React apps with REST APIs.",
      "Intermediate":"I utilize React best practices like functional components, Hooks and code splitting in my applications. I can create reusable React component libraries and optimize performance.",
      "Advanced":"I architect complex React codebases that are maintainable and scalable. I implement advanced patterns like higher order components, context, suspense. I can lead frontend development and make tradeoff decisions on frameworks and libraries.",
      "Expert":"I am an expert in building pixel-perfect, high performance React experiences. I have deep knowledge of React internals and contribute to the framework. I lead frontend strategy, governance and standards for large organizations. I can navigate business needs to deliver optimal React solutions."
    },
    "Testing":{
      "Beginner": "I understand the basic principles of unit and integration testing. I can write simple isolated unit tests for individual functions or classes.",
      "Advanced Beginner":"I regularly write unit tests using the selected framework as part of my development workflow. I can do basic integration testing between simple modules.",
      "Intermediate":"I can do test driven development and have well-tested modular code with mocks, stubs and fakes. I can set up integration test environments and write automated tests for complex scenarios.",
      "Advanced":"I advocate for and implement testing best practices at all levels within applications and systems. I can create re-usable test harnesses and utilities. I provide mentoring and leadership on effective testing strategies.",
      "Expert":"I am highly proficient with unit and integration testing techniques, principles and design patterns. I can diagnose and improve testing coverage across large scale systems. I influence test automation standards and strategies at an organizational level."
    }
    ,"REMOVE??? Style and Semantics": {
      "Beginner": "Methods are typically too large with verbose or otherwise unuseful names. Can imitate patterns or styles but often incorrectly.",
      "Advanced Beginner": "Will think about how to solve a problem generically before worrying about syntax. Will ask naive but still-useful questions. Will require reinforcement to follow established patterns.",
      "Intermediate": "Uses inoffensive function and variable names as a rule. Has developed opinions about coding styles and languages and can speak about their background. Highly complex code may still need a heavy hand from Advanced or Expert developers to make it beautiful.",
      "Advanced": "Has a knack for using agreeable function and variable names that other developer s use without complaint. Deviates from style when appropriate but is an advocate for shared approaches. Capable of implementing complex code and explaining it to another developer for validation.",
      "Expert": "Consistently drives high-level vision for style with high team buy-in. Influences entire codebases while writing a subset of the code. Accepts feedback and follows along when joining a new team with mature practices - even if those practices don't match the Developer's own."
    }
  },
  "Infrastructure": {
    "Source Control and Application Lifecycle Management": {
      "Beginner": "I understand basic source control concepts and can commit code changes to repositories like Git. I follow prescribed workflows for checkouts, commits and merges.",
      "Advanced Beginner": "I effectively use source control branching strategies and can manage my own workstream. I can articulate the purpose of code reviews and contribution workflows.",
      "Intermediate": "I optimize and enforce source control best practices across teams. I can configure policies, access controls and integrate SCM into CI/CD pipelines.",
      "Advanced": "I establish source control standards and architectures. I lead audits and drive improvements to SCM processes and tools. I provide mentoring on effective use of source control.",
      "Expert": "I am a leader on scalable and secure source code and ALM strategies. I advise the organization on end-to-end SCM architectures and practices. I pioneer improvements to core frameworks, tools, and my companies procedures."
    },
    "Design and Deployment": {
      "Beginner": "I can deploy simple applications following step-by-step instructions. I understand basic deployment concepts but require guidance to troubleshoot issues.",
      "Advanced Beginner": "I can script deployment of applications and provision infrastructure. I can monitor and check health of deployed apps. I have awareness of deployment automation tools.",
      "Intermediate": "I can design deployment pipelines, integrate monitoring, and handle rollbacks. I make recommendations to improve deployment processes. I automate deployments across environments.",
      "Advanced": "I lead deployment infrastructure design and implementation across the SDLC. I ensure security, compliance and reliability of deployment pipelines. I mentor others on end-to-end deployment best practices.",
      "Expert": "I pioneer deployment automation strategies for my organization. I build and advance tools, architectures and standards for deployment. I am a trusted advisor on deployment infrastructure and DevOps."
    }
  }
}
